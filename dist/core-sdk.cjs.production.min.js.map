{"version":3,"file":"core-sdk.cjs.production.min.js","sources":["../src/enums/ChainId.ts","../src/enums/ChainKey.ts","../src/enums/Rounding.ts","../src/enums/SolidityType.ts","../src/enums/TradeType.ts","../src/enums/TradeVersion.ts","../src/constants/addresses.ts","../src/constants/chain.ts","../src/constants/legacy.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/entities/Native/Telos.ts","../src/entities/Native/Glmr.ts","../src/entities/Native/Kava.ts","../src/entities/Native/Metis.ts","../src/entities/Native/Boba.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/solidity.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/math.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/functions/contract.ts","../src/router.ts","../src/functions/rebase.ts","../src/functions/validateSolidityTypeInstance.ts"],"sourcesContent":["export enum ChainId {\n  ETHEREUM = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  SEPOLIA = 11155111,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  FUSE = 122,\n  TELOS = 40,\n  HARDHAT = 31337,\n  MOONBEAM = 1284,\n  OPTIMISM = 10,\n  KAVA = 2222,\n  METIS = 1088,\n  ARBITRUM_NOVA = 42170,\n  BOBA_AVAX = 43288,\n}\n","export enum ChainKey {\n  ARBITRUM = 'arbitrum',\n  ARBITRUM_TESTNET = 'arbitrum-testnet',\n  AVALANCHE = 'avalanche',\n  AVALANCHE_TESTNET = 'avalance-testnet',\n  BSC = 'bsc',\n  BSC_TESTNET = 'bsc-testnet',\n  CELO = 'celo',\n  ETHEREUM = 'ethereum',\n  FANTOM = 'fantom',\n  FANTOM_TESTNET = 'fantom-testnet',\n  FUSE = 'fuse',\n  GÖRLI = 'goerli',\n  SEPOLIA = 'sepolia',\n  HARMONY = 'harmony',\n  HARMONY_TESTNET = 'harmony-testnet',\n  HECO = 'heco',\n  HECO_TESTNET = 'heco-testnet',\n  KOVAN = 'kovan',\n  ROPSTEN = 'ropsten',\n  MATIC = 'polygon',\n  MATIC_TESTNET = 'matic-testnet',\n  MOONBEAM_TESTNET = 'moonbeam-testnet',\n  MOONRIVER = 'moonriver',\n  OKEX = 'okex',\n  OKEX_TESTNET = 'okex-testnet',\n  PALM = 'palm',\n  PALM_TESTNET = 'palm-testnet',\n  RINKEBY = 'rinkeby',\n  TELOS = 'telos',\n  XDAI = 'xdai',\n  MOONBEAM = 'moonbeam',\n  OPTIMISM = 'optimism',\n  KAVA = 'kava',\n  METIS = 'metis',\n  ARBITRUM_NOVA = 'arbitrum-nova',\n  BOBA_AVAX = 'boba-avax',\n}\n","export enum Rounding {\n  ROUND_DOWN = 0,\n  ROUND_HALF_UP = 1,\n  ROUND_HALF_EVEN = 2,\n  ROUND_UP = 3,\n}\n","export enum SolidityType {\n    uint8 = 'uint8',\n    uint256 = 'uint256',\n}","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n","export enum TradeVersion {\n  V2TRADE,\n  V3TRADE,\n}\n","import { AddressMap } from '../types'\nimport { ChainId } from '../enums'\n\nexport const OASIS_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [11155111]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\n  [ChainId.AVALANCHE]: '0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76',\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xf390830DF829cf22c53c8840554B98eafC5dCBc2',\n  [ChainId.CELO]: '0x29dFce9c22003A4999930382Fd00f9Fd6133Acd1',\n  [ChainId.TELOS]: '0x922D641a426DcFFaeF11680e5358F34d97d112E1',\n  [ChainId.FUSE]: '0x90708b20ccC1eb95a4FA7C8b18Fd2C22a0Ff9E78',\n  [ChainId.MOONBEAM]: '0x2C78f1b70Ccf63CDEe49F9233e9fAa99D43AA07e',\n  [ChainId.KAVA]: '0x7C598c96D02398d89FbCb9d41Eab3DF0C16F227D',\n  [ChainId.METIS]: '0x17Ee7E4dA37B01FC1bcc908fA63DF343F23B4B7C',\n}\n\nexport const SUSHI_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\n  [ChainId.AVALANCHE]: '0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76',\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xf390830DF829cf22c53c8840554B98eafC5dCBc2',\n  [ChainId.CELO]: '0x29dFce9c22003A4999930382Fd00f9Fd6133Acd1',\n  [ChainId.TELOS]: '0x922D641a426DcFFaeF11680e5358F34d97d112E1',\n  [ChainId.FUSE]: '0x90708b20ccC1eb95a4FA7C8b18Fd2C22a0Ff9E78',\n  [ChainId.MOONBEAM]: '0x2C78f1b70Ccf63CDEe49F9233e9fAa99D43AA07e',\n  [ChainId.KAVA]: '0x7C598c96D02398d89FbCb9d41Eab3DF0C16F227D',\n  [ChainId.METIS]: '0x17Ee7E4dA37B01FC1bcc908fA63DF343F23B4B7C',\n}\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  [ChainId.MATIC_TESTNET]: '0x742DfA5Aa70a8212857966D491D67B09Ce7D6ec7',\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\n  [ChainId.MOONRIVER]: '0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D',\n  [ChainId.CELO]: '0xef4229c8c3250C675F21BCefa42f58EfbfF6002a',\n  [ChainId.TELOS]: '0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b',\n  [ChainId.FUSE]: '0x620fd5fa44BE6af63715Ef4E65DDFA0387aD13F5',\n  [ChainId.MOONBEAM]: '0x8f552a71EFE5eeFc207Bf75485b356A0b3f01eC9',\n  [ChainId.OPTIMISM]: '0x7F5c764cBc14f9669B88837ca1490cCa17c31607',\n  [ChainId.KAVA]: '0xfA9343C3897324496A05fC75abeD6bAC29f8A40f',\n  [ChainId.METIS]: '0xEA32A96608495e54156Ae48931A7c20f0dcc1a21',\n  [ChainId.ARBITRUM_NOVA]: '0x750ba8b76187092B0D1E87E28daaf484d1b5273b',\n}\n\nexport const USD_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: USDC_ADDRESS[ChainId.ETHEREUM],\n  [ChainId.ROPSTEN]: USDC_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.KOVAN]: USDC_ADDRESS[ChainId.KOVAN],\n  [ChainId.MATIC]: USDC_ADDRESS[ChainId.MATIC],\n  [ChainId.MATIC_TESTNET]: USDC_ADDRESS[ChainId.MATIC_TESTNET],\n  [ChainId.FANTOM]: USDC_ADDRESS[ChainId.FANTOM],\n  [ChainId.BSC]: USDC_ADDRESS[ChainId.BSC],\n  [ChainId.HARMONY]: USDC_ADDRESS[ChainId.HARMONY],\n  [ChainId.HECO]: USDC_ADDRESS[ChainId.HECO],\n  [ChainId.OKEX]: USDC_ADDRESS[ChainId.OKEX],\n  [ChainId.XDAI]: USDC_ADDRESS[ChainId.XDAI],\n  [ChainId.ARBITRUM]: USDC_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.AVALANCHE]: USDC_ADDRESS[ChainId.AVALANCHE],\n  [ChainId.MOONRIVER]: USDC_ADDRESS[ChainId.MOONRIVER],\n  [ChainId.CELO]: '0x765DE816845861e75A25fCA122bb6898B8B1282a',\n  [ChainId.TELOS]: USDC_ADDRESS[ChainId.TELOS],\n  [ChainId.FUSE]: USDC_ADDRESS[ChainId.FUSE],\n  [ChainId.MOONBEAM]: USDC_ADDRESS[ChainId.MOONBEAM],\n  [ChainId.OPTIMISM]: USDC_ADDRESS[ChainId.OPTIMISM],\n  [ChainId.KAVA]: USDC_ADDRESS[ChainId.KAVA],\n  [ChainId.METIS]: USDC_ADDRESS[ChainId.METIS],\n  [ChainId.ARBITRUM_NOVA]: USDC_ADDRESS[ChainId.ARBITRUM_NOVA],\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  [ChainId.MATIC_TESTNET]: '0x714550C2C1Ea08688607D86ed8EeF4f5E4F22323',\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n  [ChainId.AVALANCHE]: '0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB',\n  [ChainId.PALM]: '0x726138359C17F1E56bA8c4F737a7CAf724F6010b',\n  [ChainId.CELO]: '0x122013fd7dF1C6F636a5bb8f03108E876548b455',\n  [ChainId.MOONRIVER]: '0x639A647fbe20b6c8ac19E48E2de44ea792c62c5C',\n  [ChainId.TELOS]: '0xfA9343C3897324496A05fC75abeD6bAC29f8A40f',\n  [ChainId.FUSE]: '0xa722c13135930332Eb3d749B2F0906559D2C5b99',\n  [ChainId.MOONBEAM]: '0x30D2a9F5FDf90ACe8c17952cbb4eE48a55D916A7',\n  [ChainId.OPTIMISM]: '0x4200000000000000000000000000000000000006',\n  [ChainId.KAVA]: '0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D',\n  [ChainId.METIS]: '0x420000000000000000000000000000000000000A',\n  [ChainId.ARBITRUM_NOVA]: '0x722E8BdD2ce80A4422E880164f2079488e115365',\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: WETH9_ADDRESS[ChainId.ETHEREUM],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.OPTIMISM]: WETH9_ADDRESS[ChainId.OPTIMISM],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.MATIC_TESTNET]: '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  [ChainId.MOONBEAM_TESTNET]: '0x372d0695E75563D9180F8CE31c9924D7e8aaac47',\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\n  [ChainId.TELOS]: '0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E',\n  [ChainId.MOONBEAM]: '0xAcc15dC74880C9944775448304B263D191c6077F',\n  [ChainId.KAVA]: '0xc86c7C0eFbd6A49B35E8714C5f59D99De09A225b',\n  [ChainId.METIS]: '0x75cb093E4D61d2A2e65D8e0BBb01DE8d89b53481',\n  [ChainId.ARBITRUM_NOVA]: WETH9_ADDRESS[ChainId.ARBITRUM_NOVA],\n  [ChainId.BOBA_AVAX]: '0x26c319B7B2cF823365414d082698C8ac90cbBA63',\n}\n\nexport const DAI_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n  [ChainId.ROPSTEN]: '0xc2118d4d90b274016cB7a54c03EF52E6c537D957',\n  [ChainId.KOVAN]: '0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa',\n  [ChainId.MATIC]: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',\n  [ChainId.FANTOM]: '0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\n  [ChainId.BSC]: '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',\n  [ChainId.HARMONY]: '0xEf977d2f931C1978Db5F6747666fa1eACB0d0339',\n  [ChainId.HECO]: '0x3D760a45D0887DFD89A2F5385a236B29Cb46ED2a',\n  [ChainId.OKEX]: '0x21cDE7E32a6CAF4742d00d44B07279e7596d26B9',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.ARBITRUM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\n  [ChainId.AVALANCHE]: '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70',\n  [ChainId.CELO]: '0x90Ca507a5D4458a4C6C6249d186b6dCb02a5BCCd',\n  [ChainId.MOONRIVER]: '0x80A16016cC4A2E6a2CACA8a4a498b1699fF0f844',\n  // [ChainId.TELOS]: '',\n  [ChainId.FUSE]: '0x94Ba7A27c7A95863d1bdC7645AC2951E0cca06bA',\n  [ChainId.MOONBEAM]: '0xc234A67a4F840E61adE794be47de455361b52413',\n  [ChainId.OPTIMISM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\n  [ChainId.KAVA]: '0x765277EebeCA2e31912C9946eAe1021199B39C61',\n  [ChainId.METIS]: '0x4c078361FC9BbB78DF910800A991C7c3DD2F6ce0',\n  [ChainId.ARBITRUM_NOVA]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\n}\n\nexport const USDT_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n  [ChainId.ROPSTEN]: '0x110a13FC3efE6A245B50102D2d79B3E76125Ae83',\n  [ChainId.KOVAN]: '0x07de306FF27a2B630B1141956844eB1552B956B5',\n  [ChainId.MATIC]: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\n  [ChainId.FANTOM]: '0x049d68029688eAbF473097a2fC38ef61633A3C7A',\n  [ChainId.BSC]: '0x55d398326f99059fF775485246999027B3197955',\n  [ChainId.HARMONY]: '0x3C2B8Be99c50593081EAA2A724F0B8285F5aba8f',\n  [ChainId.HECO]: '0xa71EdC38d189767582C38A3145b5873052c3e47a',\n  [ChainId.OKEX]: '0x382bB369d343125BfB2117af9c149795C6C65C50',\n  [ChainId.XDAI]: '0x4ECaBa5870353805a9F068101A40E0f32ed605C6',\n  [ChainId.ARBITRUM]: '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9',\n  [ChainId.AVALANCHE]: '0xc7198437980c041c805A1EDcbA50c1Ce5db95118',\n  [ChainId.CELO]: '0x88eeC49252c8cbc039DCdB394c0c2BA2f1637EA0',\n  [ChainId.MOONRIVER]: '0xB44a9B6905aF7c801311e8F4E76932ee959c663C',\n  [ChainId.TELOS]: '0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73',\n  [ChainId.FUSE]: '0xFaDbBF8Ce7D5b7041bE672561bbA99f79c532e10',\n  [ChainId.MOONBEAM]: '0x8e70cd5b4ff3f62659049e74b6649c6603a0e594',\n  [ChainId.OPTIMISM]: '0x94b008aA00579c1307B0EF2c499aD98a8ce58e58',\n  [ChainId.KAVA]: '0xB44a9B6905aF7c801311e8F4E76932ee959c663C',\n  [ChainId.METIS]: '0xbB06DCA3AE6887fAbF931640f67cab3e3a16F4dC',\n  [ChainId.ARBITRUM_NOVA]: '0xeD9d63a96c27f87B07115b56b2e3572827f21646',\n}\n\nexport const MIM_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3',\n  [ChainId.FANTOM]: '0x82f0B8B456c1A451378467398982d4834b6829c1',\n  [ChainId.BSC]: '0xfE19F0B51438fd612f6FD59C1dbB3eA319f433Ba',\n  [ChainId.ARBITRUM]: '0xFEa7a6a0B346362BF88A9e4A88416B77a57D6c2A',\n  [ChainId.AVALANCHE]: '0x130966628846BFd36ff31a822705796e8cb8C18D',\n  [ChainId.MATIC]: '0x49a0400587A7F65072c87c4910449fDcC5c47242',\n  [ChainId.MOONRIVER]: '0x0caE51e1032e8461f4806e26332c030E34De3aDb',\n}\n\nexport const FRAX_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x853d955aCEf822Db058eb8505911ED77F175b99e',\n  [ChainId.FANTOM]: '0xdc301622e621166BD8E82f2cA0A26c13Ad0BE355',\n  [ChainId.BSC]: '0x90C97F71E18723b0Cf0dfa30ee176Ab653E89F40',\n  [ChainId.ARBITRUM]: '0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F',\n  [ChainId.AVALANCHE]: '0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64',\n  [ChainId.MATIC]: '0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89',\n  [ChainId.MOONRIVER]: '0x1A93B23281CC1CDE4C4741353F3064709A16197d',\n  [ChainId.MOONBEAM]: '0x322E86852e492a7Ee17f28a78c663da38FB33bfb',\n  [ChainId.HARMONY]: '0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200',\n}\n\nexport const FACTORY_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\n  [ChainId.TELOS]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MOONBEAM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_NOVA]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BOBA_AVAX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n}\n\nexport const ROUTER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.TELOS]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MOONBEAM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_NOVA]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BOBA_AVAX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n}\n\nexport const MASTERCHEF_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n}\n\nexport const BAR_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n}\n\nexport const MAKER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n}\n\nexport const TIMELOCK_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\n}\n\nexport const BENTOBOX_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.KOVAN]: '0xc381a85ed7C7448Da073b7d6C9d4cBf1Cbf576f0',\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.CELO]: '0x0711B6026068f736bae6B213031fCE978D48E026',\n  [ChainId.HARMONY]: '0xA28cfF72b04f83A7E3f912e6ad34d5537708a2C2',\n  [ChainId.MOONBEAM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.MOONRIVER]: '0x145d82bCa93cCa2AE057D1c6f26245d1b9522E6F',\n  [ChainId.OPTIMISM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KAVA]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.METIS]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n}\n\nexport const KASHI_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n}\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\n}\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920',\n}\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448',\n}\n\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\n\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\n\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\n\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59',\n}\n\nexport const BORING_HELPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.KOVAN]: '0x5bd6e4eFA335192FDA5D6B42a344ccA3d45894B8',\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.ARBITRUM]: '0x9AF28d4f7Fa007686958c306BD4c8c52c2b615b8',\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n}\n\nexport const MINICHEF_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.CELO]: '0x8084936982D089130e001b470eDf58faCA445008',\n  [ChainId.MOONRIVER]: '0x3dB01570D97631f69bbb0ba39796865456Cf89A5',\n  [ChainId.FUSE]: '0x182CD0C6F1FaEc0aED2eA83cd0e160c8Bd4cb063',\n  [ChainId.FANTOM]: '0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5',\n  [ChainId.MOONBEAM]: '0x011E52E4E40CF9498c79273329E8827b21E2e581',\n  [ChainId.KAVA]: '0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5',\n  [ChainId.METIS]: '0x1334c8e873E1cae8467156e2A81d1C8b566B2da1',\n}\n\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\n}\n\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n}\n\nexport const ZAPPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n}\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955',\n}\n\nexport const MULTICALL2_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.TELOS]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.MOONBEAM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n}\n\nexport const BALANCE_FETCHER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x386a4B75578C7843A6082EFe181D5d629236C047',\n  [ChainId.MATIC]: '0x06a846BA430Ed005bE60f8598B4C563dbaa6feF0',\n  [ChainId.AVALANCHE]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\n  [ChainId.XDAI]: '0x26DC4e2f63bad22BCdF99087E40bd5B6c456e69d',\n  [ChainId.BSC]: '0x9d6c13Bc5269E553C4697767b4c267FB33Dd8d1A',\n  [ChainId.ARBITRUM]: '0x0e9b6C08Fe70Aac8fd08a74a076c2B1C9f7c7d14',\n  [ChainId.HECO]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\n  [ChainId.KOVAN]: '0x980bE39AC44E5500f0f16bA692084A6E44e6549A',\n}\n\nexport const MULTISIG_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x19B3Eb3Af5D93b77a5619b047De0EED7115A19e7',\n  // [ChainId.ROPSTEN]: '',\n  // [ChainId.RINKEBY]: '',\n  // [ChainId.GÖRLI]: '',\n  // [ChainId.KOVAN]: '',\n  [ChainId.FANTOM]: '0xF9E7d4c6d36ca311566f46c81E572102A2DC9F52',\n  [ChainId.MATIC]: '0x850a57630A2012B2494779fBc86bBc24F2a7baeF',\n  [ChainId.XDAI]: '0xc375411C6597F692Add6a7a3AD5b3C38626B0F26',\n  [ChainId.BSC]: '0xc6fD91aD4919Fd91e2c84077ba648092cB499638',\n  [ChainId.ARBITRUM]: '0x978982772b8e4055B921bf9295c0d74eB36Bc54e',\n  [ChainId.AVALANCHE]: '0x09842Ce338647906B686aBB3B648A6457fbB25DA',\n  // [ChainId.HECO]: '',\n  [ChainId.HARMONY]: '0x30af69A3f4a6f266961313Ce0943719dF4A8AA10',\n  // [ChainId.OKEX]: '',\n  // [ChainId.OKEX_TESTNET]: '',\n  // [ChainId.PALM]: '',\n  // [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0x939f7E76cc515cc296dD3ce362D9a52e148A7D5f',\n  [ChainId.CELO]: '0x751b01Fa14fD9640a1DF9014e2D0f3a03A198b81',\n  // [ChainId.TELOS]: '',\n  [ChainId.FUSE]: '0x33b6beb37837459Ee84a1Ffed2C6a4ca22e5F316',\n}\n","import { ChainId } from '../enums'\nimport { ChainKey } from '../enums'\n\nexport const CHAIN_KEY: { [chainId: number]: ChainKey } = {\n  [ChainId.ETHEREUM]: ChainKey.ETHEREUM,\n  [ChainId.ROPSTEN]: ChainKey.ROPSTEN,\n  [ChainId.RINKEBY]: ChainKey.RINKEBY,\n  [ChainId.GÖRLI]: ChainKey.GÖRLI,\n  [11155111]: ChainKey.SEPOLIA,\n  [ChainId.KOVAN]: ChainKey.KOVAN,\n  [ChainId.MATIC]: ChainKey.MATIC,\n  [ChainId.MATIC_TESTNET]: ChainKey.MATIC_TESTNET,\n  [ChainId.FANTOM]: ChainKey.FANTOM,\n  [ChainId.FANTOM_TESTNET]: ChainKey.FANTOM_TESTNET,\n  [ChainId.XDAI]: ChainKey.XDAI,\n  [ChainId.BSC]: ChainKey.BSC,\n  [ChainId.BSC_TESTNET]: ChainKey.BSC_TESTNET,\n  [ChainId.ARBITRUM]: ChainKey.ARBITRUM,\n  [ChainId.ARBITRUM_TESTNET]: ChainKey.ARBITRUM_TESTNET,\n  [ChainId.MOONBEAM_TESTNET]: ChainKey.MOONBEAM_TESTNET,\n  [ChainId.AVALANCHE]: ChainKey.AVALANCHE,\n  [ChainId.AVALANCHE_TESTNET]: ChainKey.AVALANCHE_TESTNET,\n  [ChainId.HECO]: ChainKey.HECO,\n  [ChainId.HECO_TESTNET]: ChainKey.HECO_TESTNET,\n  [ChainId.HARMONY]: ChainKey.HARMONY,\n  [ChainId.HARMONY_TESTNET]: ChainKey.HARMONY_TESTNET,\n  [ChainId.OKEX]: ChainKey.OKEX,\n  [ChainId.OKEX_TESTNET]: ChainKey.OKEX_TESTNET,\n  [ChainId.CELO]: ChainKey.CELO,\n  [ChainId.PALM]: ChainKey.PALM,\n  [ChainId.PALM_TESTNET]: ChainKey.PALM_TESTNET,\n  [ChainId.MOONRIVER]: ChainKey.MOONRIVER,\n  [ChainId.FUSE]: ChainKey.FUSE,\n  [ChainId.TELOS]: ChainKey.TELOS,\n  [ChainId.MOONBEAM]: ChainKey.MOONBEAM,\n  [ChainId.OPTIMISM]: ChainKey.OPTIMISM,\n  [ChainId.KAVA]: ChainKey.KAVA,\n  [ChainId.METIS]: ChainKey.METIS,\n  [ChainId.ARBITRUM_NOVA]: ChainKey.ARBITRUM_NOVA,\n  [ChainId.BOBA_AVAX]: ChainKey.BOBA_AVAX,\n}\n","import { ChainId } from '../enums/ChainId'\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  [ChainId.ETHEREUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ROPSTEN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.RINKEBY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.GÖRLI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.KOVAN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FANTOM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MATIC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BSC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ARBITRUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONBEAM_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.AVALANCHE_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HECO_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.HARMONY_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.OKEX_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.CELO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.PALM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONRIVER]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.FUSE]: '0x1901958ef8b470f2c0a3875a79ee0bd303866d85102c0f1ea820d317024d50b5',\n  [ChainId.TELOS]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.MOONBEAM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.ARBITRUM_NOVA]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n  [ChainId.BOBA_AVAX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n}\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: number\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n\n  /**\n   * Return logo\n   */\n  // public get logo(): string | null {\n  //   return this.chainId in CHAIN_KEY ? `https://raw.githubusercontent.com/sushiswap/logos/main/network/${CHAIN_KEY[this.chainId]}/.jpg` : undefined\n  // }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { ChainTokenMap, TokenMap } from '../types'\nimport { OASIS_ADDRESS, SUSHI_ADDRESS, USDC_ADDRESS, USD_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\n\nimport { ChainId } from '../enums'\nimport { Token } from '../entities/Token'\n\nexport const USDC: TokenMap = {\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, USDC_ADDRESS[ChainId.ETHEREUM], 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC_TESTNET]: new Token(ChainId.MATIC_TESTNET, USDC_ADDRESS[ChainId.MATIC_TESTNET], 6, 'USDC', 'USD Coin'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin'),\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, USDC_ADDRESS[ChainId.MOONRIVER], 6, 'USDC', 'USD Coin'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, USDC_ADDRESS[ChainId.AVALANCHE], 6, 'USDC', 'USD Coin'),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, USDC_ADDRESS[ChainId.FUSE], 6, 'USDC', 'USD Coin'),\n  [ChainId.TELOS]: new Token(ChainId.TELOS, USDC_ADDRESS[ChainId.TELOS], 6, 'USDC', 'USD Coin'),\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, USDC_ADDRESS[ChainId.MOONBEAM], 6, 'USDC', 'USD Coin'),\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, USDC_ADDRESS[ChainId.OPTIMISM], 6, 'USDC', 'USD Coin'),\n  [ChainId.KAVA]: new Token(ChainId.KAVA, USDC_ADDRESS[ChainId.KAVA], 6, 'USDC', 'USD Coin'),\n  [ChainId.METIS]: new Token(ChainId.METIS, USDC_ADDRESS[ChainId.METIS], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM_NOVA]: new Token(ChainId.ARBITRUM_NOVA, USDC_ADDRESS[ChainId.ARBITRUM_NOVA], 6, 'USDC', 'USD Coin'),\n}\n\nexport const USD: TokenMap = {\n  ...USDC,\n  [ChainId.CELO]: new Token(ChainId.CELO, USD_ADDRESS[ChainId.CELO], 18, 'cUSD', 'Celo Dollar'),\n}\n\nexport const WETH9: TokenMap = {\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, WETH9_ADDRESS[ChainId.ETHEREUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WETH9_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WETH9_ADDRESS[ChainId.PALM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WETH9_ADDRESS[ChainId.TELOS], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WETH9_ADDRESS[ChainId.FUSE], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WETH9_ADDRESS[ChainId.MOONBEAM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, WETH9_ADDRESS[ChainId.OPTIMISM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KAVA]: new Token(ChainId.KAVA, WETH9_ADDRESS[ChainId.KAVA], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.METIS]: new Token(ChainId.METIS, WETH9_ADDRESS[ChainId.METIS], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_NOVA]: new Token(\n    ChainId.ARBITRUM_NOVA,\n    WETH9_ADDRESS[ChainId.ARBITRUM_NOVA],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.ETHEREUM]: WETH9[ChainId.ETHEREUM],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.OPTIMISM]: WETH9[ChainId.OPTIMISM],\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    'WMOVR',\n    'Wrapped Moonriver'\n  ),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse'),\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WNATIVE_ADDRESS[ChainId.TELOS], 18, 'WTLOS', 'Wrapped Telos'),\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WNATIVE_ADDRESS[ChainId.MOONBEAM], 18, 'WGLMR', 'Wrapped Glimmer'),\n  [ChainId.KAVA]: new Token(ChainId.KAVA, WNATIVE_ADDRESS[ChainId.KAVA], 18, 'WKAVA', 'Wrapped Kava'),\n  [ChainId.METIS]: new Token(ChainId.METIS, WNATIVE_ADDRESS[ChainId.METIS], 18, 'WMETIS', 'Wrapped Metis'),\n  [ChainId.ARBITRUM_NOVA]: WETH9[ChainId.ARBITRUM_NOVA],\n  [ChainId.BOBA_AVAX]: new Token(ChainId.BOBA_AVAX, WNATIVE_ADDRESS[ChainId.BOBA_AVAX], 18, 'WBOBA', 'Wrapped Boba'),\n}\n\nexport const SUSHI: ChainTokenMap = {\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, SUSHI_ADDRESS[ChainId.ETHEREUM], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, SUSHI_ADDRESS[ChainId.ROPSTEN], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, SUSHI_ADDRESS[ChainId.RINKEBY], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, SUSHI_ADDRESS[ChainId.GÖRLI], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, SUSHI_ADDRESS[ChainId.KOVAN], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, SUSHI_ADDRESS[ChainId.MATIC], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, SUSHI_ADDRESS[ChainId.FANTOM], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, SUSHI_ADDRESS[ChainId.XDAI], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.BSC]: new Token(ChainId.BSC, SUSHI_ADDRESS[ChainId.BSC], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, SUSHI_ADDRESS[ChainId.ARBITRUM], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, SUSHI_ADDRESS[ChainId.AVALANCHE], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, SUSHI_ADDRESS[ChainId.OKEX], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, SUSHI_ADDRESS[ChainId.HARMONY], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.HECO]: new Token(ChainId.HECO, SUSHI_ADDRESS[ChainId.HECO], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.CELO]: new Token(ChainId.CELO, SUSHI_ADDRESS[ChainId.CELO], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, SUSHI_ADDRESS[ChainId.MOONRIVER], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, SUSHI_ADDRESS[ChainId.FUSE], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.TELOS]: new Token(ChainId.TELOS, SUSHI_ADDRESS[ChainId.TELOS], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, SUSHI_ADDRESS[ChainId.MOONBEAM], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.KAVA]: new Token(ChainId.KAVA, SUSHI_ADDRESS[ChainId.KAVA], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.METIS]: new Token(ChainId.METIS, SUSHI_ADDRESS[ChainId.METIS], 18, 'SUSHI', 'SushiToken'),\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fuse extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FUSE', 'Fuse')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fuse } = {}\n\n  public static onChain(chainId: number): Fuse {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Telos extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'TLOS', 'Telos')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Telos } = {}\n\n  public static onChain(chainId: number): Telos {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Telos(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Glmr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'GLMR', 'Glimmer')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Glmr } = {}\n\n  public static onChain(chainId: number): Glmr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Glmr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Kava extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'KAVA', 'Kava')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Kava } = {}\n\n  public static onChain(chainId: number): Kava {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Kava(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Metis extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'METIS', 'Metis')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Metis } = {}\n\n  public static onChain(chainId: number): Metis {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Metis(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Boba extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BOBA', 'Boba')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Boba } = {}\n\n  public static onChain(chainId: number): Boba {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Boba(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import {\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Fuse,\n  Glmr,\n  Harmony,\n  Heco,\n  Kava,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  Telos,\n  xDai,\n  Metis,\n  Boba,\n} from '../entities/Native'\n\nimport { ChainId } from '../enums'\nimport { NativeMap } from '../types'\n\nexport const NATIVE: NativeMap = {\n  [ChainId.ETHEREUM]: Ether.onChain(ChainId.ETHEREUM),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [11155111]: Ether.onChain(11155111),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.ARBITRUM_TESTNET]: Ether.onChain(ChainId.ARBITRUM_TESTNET),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE),\n  [ChainId.TELOS]: Telos.onChain(ChainId.TELOS),\n  [ChainId.MOONBEAM]: Glmr.onChain(ChainId.MOONBEAM),\n  [ChainId.OPTIMISM]: Ether.onChain(ChainId.OPTIMISM),\n  [ChainId.KAVA]: Kava.onChain(ChainId.KAVA),\n  [ChainId.METIS]: Metis.onChain(ChainId.METIS),\n  [ChainId.ARBITRUM_NOVA]: Ether.onChain(ChainId.ARBITRUM_NOVA),\n  [ChainId.BOBA_AVAX]: Boba.onChain(ChainId.BOBA_AVAX),\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)","import JSBI from 'jsbi'\nimport { SolidityType } from \"../enums/SolidityType\";\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n}","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_HALF_EVEN]: Decimal.ROUND_HALF_EVEN,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\n// const toFixedRounding = {\n//   [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n//   [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n//   [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n// }\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: 0, // Round down\n  [Rounding.ROUND_HALF_UP]: 1, // Round half up\n  [Rounding.ROUND_HALF_EVEN]: 2, // Round half even\n  [Rounding.ROUND_UP]: 3, // Round up\n};\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding],\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n\n  /**\n   * Returns a string representation of the address and currency amount.\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\n   */\n  public serialize(): string {\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities/Token'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[token0.chainId]\n  )\n}\n","import { ONE, TWO, ZERO } from '../constants/numbers'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n\n/**\n * Returns the smallest member of the array\n * @param values the values from which the smallest gets returned\n * @returns the smallest memmber of the array\n */\nexport function minimum(...values: JSBI[]): JSBI {\n  let lowest = values[0]\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i]\n    if (JSBI.LT(value, lowest)) {\n      lowest = value\n    }\n  }\n  return lowest\n}\n\n/**\n * Returns the biggest member of the array\n * @param values the values from which the biggest gets returned\n * @returns the biggest memmber of the array\n */\nexport function maximum(...values: JSBI[]): JSBI {\n  let highest = values[0]\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i]\n    if (JSBI.GT(value, highest)) {\n      highest = value\n    }\n  }\n  return highest\n}\n\nexport function difference(a: JSBI, b: JSBI): JSBI {\n  if (JSBI.greaterThan(a, b)) {\n    return JSBI.subtract(a, b)\n  }\n  return JSBI.subtract(b, a)\n}\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/math'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n    })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n\n      console.log({\n        amount0: amount0.toString(),\n        amount1: amount1.toString(),\n        liquidity: liquidity.toString(),\n        totalSupply: totalSupply.quotient.toString(),\n        kLast: sqrt(JSBI.multiply(this.tokenAmounts[0].quotient, this.tokenAmounts[1].quotient)),\n      })\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every((pair) => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency } from '../entities/Currency'\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\nimport { Percent } from '../entities/Percent'\nimport { Price } from '../entities/Price'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums/TradeType'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ONE, ZERO } from '../constants'\nimport { Rebase } from '../interfaces'\n\nexport function rebase(value: JSBI, from: JSBI, to: JSBI): JSBI {\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : ZERO\n}\n\nexport function toElastic(total: Rebase, base: JSBI, roundUp: boolean): JSBI {\n  let elastic: JSBI\n  if (JSBI.equal(total.base, ZERO)) {\n    elastic = base\n  } else {\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base)\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\n      elastic = JSBI.add(elastic, ONE)\n    }\n  }\n\n  return elastic\n}\n","import { SOLIDITY_TYPE_MAXIMA, ZERO } from '../constants'\nimport { SolidityType } from '../enums'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n"],"names":["ChainId","ChainKey","Rounding","SolidityType","TradeType","TradeVersion","OASIS_ADDRESS","_OASIS_ADDRESS","ETHEREUM","ROPSTEN","RINKEBY","GÖRLI","KOVAN","FANTOM","MATIC","XDAI","BSC","ARBITRUM","AVALANCHE","HECO","HARMONY","OKEX","OKEX_TESTNET","PALM","PALM_TESTNET","MOONRIVER","CELO","TELOS","FUSE","MOONBEAM","KAVA","METIS","SUSHI_ADDRESS","_SUSHI_ADDRESS","USDC_ADDRESS","_USDC_ADDRESS","MATIC_TESTNET","OPTIMISM","ARBITRUM_NOVA","USD_ADDRESS","_USD_ADDRESS","WETH9_ADDRESS","_WETH9_ADDRESS","ARBITRUM_TESTNET","WNATIVE_ADDRESS","_WNATIVE_ADDRESS","FANTOM_TESTNET","BSC_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","BOBA_AVAX","DAI_ADDRESS","_DAI_ADDRESS","USDT_ADDRESS","_USDT_ADDRESS","MIM_ADDRESS","_MIM_ADDRESS","FRAX_ADDRESS","_FRAX_ADDRESS","FACTORY_ADDRESS","_FACTORY_ADDRESS","ROUTER_ADDRESS","_ROUTER_ADDRESS","MASTERCHEF_ADDRESS","_MASTERCHEF_ADDRESS","BAR_ADDRESS","_BAR_ADDRESS","MAKER_ADDRESS","_MAKER_ADDRESS","TIMELOCK_ADDRESS","_TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","_BENTOBOX_ADDRESS","KASHI_ADDRESS","_KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","_SUSHISWAP_SWAPPER_AD","SUSHISWAP_MULTISWAPPER_ADDRESS","_SUSHISWAP_MULTISWAPP","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","_SUSHISWAP_MULTI_EXAC","CHAINLINK_ORACLE_ADDRESS","_CHAINLINK_ORACLE_ADD","BORING_HELPER_ADDRESS","_BORING_HELPER_ADDRES","MINICHEF_ADDRESS","_MINICHEF_ADDRESS","MASTERCHEF_V2_ADDRESS","_MASTERCHEF_V2_ADDRES","ENS_REGISTRAR_ADDRESS","_ENS_REGISTRAR_ADDRES","ZAPPER_ADDRESS","_ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","MULTICALL2_ADDRESS","_MULTICALL2_ADDRESS","BALANCE_FETCHER_ADDRESS","_BALANCE_FETCHER_ADDR","MULTISIG_ADDRESS","_MULTISIG_ADDRESS","CHAIN_KEY","_CHAIN_KEY","SEPOLIA","INIT_CODE_HASH","_INIT_CODE_HASH","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","this","NativeCurrency","_AbstractCurrency","_this","_inheritsLoose","validateAndParseAddress","address","getAddress","error","Token","call","_proto","prototype","equals","other","isToken","sortsBefore","toLowerCase","_createClass","key","get","USDC","_USDC","USD","_extends","_extends2","WETH9","_WETH","WNATIVE","_WNATIVE","SUSHI","_SUSHI","Avalanche","_NativeCurrency","onChain","_this$_cache$chainId","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_this$_etherCache$cha","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","Telos","Glmr","Kava","Metis","Boba","NATIVE","_NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MINIMUM_LIQUIDITY","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","constructor","setPrototypeOf","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_HALF_EVEN","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","_Fraction","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","serialize","wrapped","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","_ref2","token0","getCreate2Address","keccak256","pack","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","Pair","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","console","log","kLast","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","_step","path","_iterator","_createForOfIteratorHelperLoose","entries","done","_step$value","currentInput","push","_midPrice","_step2","prices","_iterator2","_step2$value","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","EXACT_INPUT","i","_pair$getOutputAmount","_pair$getInputAmount","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","isInsufficientInputAmountError","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","isInsufficientReservesError","getSigner","library","account","connectUnchecked","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","to","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","currencyA","currencyB","highest","undefined","GT","lowest","LT","from","total","base","roundUp","elastic","solidityType"],"mappings":"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"}